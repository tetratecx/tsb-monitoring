apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicas }}
  serviceName: prometheus-server
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
        runAsNonRoot: true
      serviceAccountName: {{ .Values.serviceAccount }}
      containers:
        - name: prometheus
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.enable-lifecycle"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
        - name: prometheus-configmap-reloader
          image: jimmidyson/configmap-reload:v0.5.0
          imagePullPolicy: IfNotPresent
          args:
            - --volume-dir=/etc/prometheus
            - --webhook-url=http://localhost:9090/-/reload
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-server-conf
            items:
              - key: prometheus.yml
                path: prometheus.yml
  volumeClaimTemplates:
    - metadata:
        name: prometheus-storage-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.storage.size }}
